type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.java
  visible: true
  text: |+
    package phonebook;

    import phonebook.search.Search;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) throws FileNotFoundException {
            File directoryFile = new File("/home/kosmas-deligkaris/directory.txt");
            File findFile = new File("/home/kosmas-deligkaris/find.txt");

            // Load directory into memory
            List<String> directoryList = new ArrayList<String>();
            Scanner directoryScanner = new Scanner(directoryFile);
            while (directoryScanner.hasNext()) {
                directoryList.add(directoryScanner.nextLine());
            }
            System.out.println("Loaded directory");

            // Load entries from find file
            Scanner findScanner = new Scanner(findFile);
            List<String> findList = new ArrayList<String>();
            while (findScanner.hasNext()) {
                findList.add(findScanner.nextLine());
            }


            // Find entries
            System.out.println("Start searching...");
            int foundEntries = 0;
            long preTime = System.currentTimeMillis();

            for (String entry : findList) {
                // System.out.println("Searching for: " + entry);
                for (String directoryEntry : directoryList) {
                    if (directoryEntry.contains(entry)) {
                      //  System.out.println("Entry found");
                        foundEntries++;
                        break;
                    }
                }
            }
            long postTime = System.currentTimeMillis();
            long timePassed = (postTime - preTime);
            System.out.println("Found " + foundEntries + " / " + findList.size() + " entries. Time taken: " + timePassed);


        }


    }

  learner_created: false
- name: src/phonebook/search/Search.java
  visible: true
  text: |-
    package phonebook.search;

    import java.util.List;

    public interface Search {

        int search(String phoneNumber, List<String> directory);



    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/search/LinearSearchString.java
  visible: true
  text: |
    package phonebook.search;

    import phonebook.domain.PhoneBookEntry;

    import java.util.List;

    public class LinearSearchString implements Search{

        public int search(List<PhoneBookEntry> catalog, String stringToFind) {

            for (int i = 0; i < catalog.size(); i++) {
                if (catalog.get(i).getName().equals(stringToFind)) {
                    return i;
                }
            }

            return -1;
        }
    }
  learner_created: true
- name: src/phonebook/sort/QuickSort.java
  visible: true
  text: |
    package phonebook.sort;

    import phonebook.domain.PhoneBookEntry;

    import java.io.IOException;
    import java.util.*;

    public class QuickSort {

        public void sortPhoneBook(List<PhoneBookEntry> toSortPhoneBook) {


            if (toSortPhoneBook.size() <= 1) {
                return;
            }

            int leftBoundary = 0;
            int rightBoundary = toSortPhoneBook.size() - 1;
            int pivot = partition(toSortPhoneBook, leftBoundary, rightBoundary); // partition the whole list at first

            List<PhoneBookEntry> leftSubList = toSortPhoneBook.subList(leftBoundary, pivot);
            List<PhoneBookEntry> rightSubList = toSortPhoneBook.subList(pivot + 1, toSortPhoneBook.size());

            sortPhoneBook(leftSubList);
            sortPhoneBook(rightSubList);
        }

        private int partition(List<PhoneBookEntry> listToPartition, int leftBoundary, int rightBoundary) {

          //  System.out.println("Before partition:");
           // System.out.println(Arrays.toString(listToPartition.toArray()));


            // temporary pivot position(a.k.a index of last element found to be smaller than the pivot value), starts
            // with -1.
            int postPartitionPivotPosition = -1;
            int pivotPosition = listToPartition.size() - 1;
            int searchRightBoundary = rightBoundary - 1 ; // since the pivot is the last element


            for (int i = leftBoundary; i < rightBoundary; i++) {
                if (listToPartition.get(i).compareTo(listToPartition.get(pivotPosition)) <= 0) {
                    postPartitionPivotPosition++;
                    PhoneBookEntry tempEntry = listToPartition.get(postPartitionPivotPosition);
                    listToPartition.set(postPartitionPivotPosition, listToPartition.get(i));
                    listToPartition.set(i, tempEntry);
                }
            }

            postPartitionPivotPosition++;
            PhoneBookEntry tempEntry = listToPartition.get(postPartitionPivotPosition);
            listToPartition.set(postPartitionPivotPosition, listToPartition.get(pivotPosition));
            listToPartition.set(pivotPosition, tempEntry);

        //    System.out.println("After partition:");
        //    System.out.println(Arrays.toString(listToPartition.toArray()));


            return postPartitionPivotPosition;

        }

    }
  learner_created: true
- name: src/phonebook/search/JumpSearchNumeric.java
  visible: true
  text: |
    package phonebook.search;

    public class JumpSearchNumeric {

        public int search(int[] sortedArray, int numberToFind, boolean arrayIsAscending) {
            int numberOfComparisons = 0;

            if (arrayIsAscending) {
                throw new RuntimeException("Only search in descending arrays has been implemented here.");
            }

            // Search in descending array
            int blockSize = (int) Math.floor(Math.sqrt(sortedArray.length));

            System.out.println("Looking for number: " + numberToFind);

            System.out.println("Checking if the number is larger than the largest number of the array.");
            if (sortedArray[0] < numberToFind) {
                return -1;
            }

            System.out.println("Checking if the number is in the first element of the array.");
            if (sortedArray[0] == numberToFind) {
                return 0;
            }

            int currentBlock = 0;
            while (blockSize * (currentBlock + 1) < sortedArray.length) {
                currentBlock++;
                int rightIndex = currentBlock*blockSize + 1;
                int leftIndex = rightIndex - blockSize;
                System.out.println("Moving to the next block with right index: " + rightIndex + " and left index: " + leftIndex);

                // if the smallest number, i.e. the right edge number of the current block is larger than the number we
                // want to find, then we need to move to the next block.
                if (sortedArray[rightIndex] > numberToFind) {
                    numberOfComparisons++;
                    continue;
                }


                // if the right index is smaller than the number we are looking for, then the number may be in this block.
                if (sortedArray[rightIndex] <= numberToFind) {
                    System.out.println("The number we are looking for may be in this block.");
                    for (int k = rightIndex; k > rightIndex - blockSize; k--) {
                        System.out.println("Comparing with element of index:" + k);
                        if (sortedArray[k] == numberToFind) {
                            return k;
                        }
                        numberOfComparisons++;

                        if ( k - 1 == rightIndex - blockSize) {
                            System.out.println("This was the last iteration for this block.");
                        }
                    }
                }
            }

            // Try the remaining elements, if there are any left.
            for (int lastBlockIndex = sortedArray.length - 1; lastBlockIndex > currentBlock*blockSize + 1; lastBlockIndex--) {
                if (sortedArray[lastBlockIndex] == numberToFind) {
                    return lastBlockIndex;
                }
                numberOfComparisons++;
            }

            System.out.println("Number not found");
            return -1;
        }
    }
  learner_created: true
- name: src/phonebook/domain/PhoneBookEntry.java
  visible: true
  text: |
    package phonebook.domain;

    public class PhoneBookEntry implements Comparable<PhoneBookEntry>{

        String entry;


        public PhoneBookEntry(String entry) {
            this.entry = entry;
        }


        public String getName() {
            return entry.split(" ", 2)[1];
        }

        public String getNumber() {
            return entry.split(" ", 2)[0];
        }

        public String getEntry() {
            return entry;
        }

        @Override
        public int compareTo(PhoneBookEntry otherEntry) {
            return this.getName().compareTo(otherEntry.getName());
        }

        @Override
        public String toString() {
            return this.getName();
        }
    }
  learner_created: true
- name: src/phonebook/search/BinarySearchString.java
  visible: true
  text: |
    package phonebook.search;

    import phonebook.domain.PhoneBookEntry;

    import java.util.List;

    public class BinarySearchString implements Search{

        public int search(List<PhoneBookEntry> sortedPhonebook, String entryToFind) {


            int left = 0;
            int right = sortedPhonebook.size() - 1;

            while ( left <= right) {
                int middle = (left + right)/2;
              //  System.out.println("middle value: " + middle);

                if (sortedPhonebook.get(middle).getName().equals(entryToFind)) {
             //       System.out.println("Entry found at index: " + middle);
                    return middle;
                } else if (sortedPhonebook.get(middle).getName().compareTo(entryToFind) > 0) {
                    right = middle - 1;
            //        System.out.println("right value: " + right);
                } else {
                    left = middle + 1;
           //         System.out.println("left value: " + left);
                }
            }
            // if not found, return -1
           // System.out.println("Entry not found.");
            return -1;
        }
    }
  learner_created: true
- name: src/phonebook/domain/TimeDuration.java
  visible: true
  text: |
    package phonebook.domain;

    public class TimeDuration {

        long minutes;
        long seconds;
        long milliseconds;

        public TimeDuration(long timeStart, long timeEnd) {
            long timeTakenLinear = (timeEnd - timeStart);
            this.minutes = timeTakenLinear/60000;
            this.seconds = (timeTakenLinear - this.minutes*60000)/1000;
            this.milliseconds =
                    (timeTakenLinear - this.minutes *60000 - this.seconds*1000);
        }

        public long getMinutes() {
            return minutes;
        }

        public long getSeconds() {
            return seconds;
        }

        public long getMilliseconds() {
            return milliseconds;
        }
    }
  learner_created: true
- name: src/phonebook/sort/BubbleSort.java
  visible: true
  text: |
    package phonebook.sort;

    import phonebook.domain.PhoneBookEntry;
    import phonebook.domain.TimeDuration;

    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    // This bubble sort algorithm is currently applicable only to PhonebookEntry objects.
    // It may be good to investigate how to make it applicable to more classes, either by using Generics or by using
    // Interfaces.
    public class BubbleSort {


        FileWriter sortDetailsWriter;

        public Optional<List<PhoneBookEntry>> sortPhoneBook(List<PhoneBookEntry> unsortedPhoneBook, boolean ascending,
                                                            long maxduration, boolean exportDetails) throws IOException {

            if (!ascending) {
                throw new RuntimeException("Only ascending sorting is currently supported");
            }

            long startTime = System.currentTimeMillis();

            List<PhoneBookEntry> toSortPhoneBook = new ArrayList<PhoneBookEntry>(unsortedPhoneBook);

            if (exportDetails) {
                sortDetailsWriter = new FileWriter("bubbleSortDetails.txt");
            }


            PhoneBookEntry tempEntry;
            boolean changesOccuredInLastLoop;
            int countIters = 0;
            int numberOfChangesInIter;

            do {
                changesOccuredInLastLoop = false;
                numberOfChangesInIter = 0;
                for (int i = 0; i < toSortPhoneBook.size() - 1; i++) {
                    if (toSortPhoneBook.get(i).compareTo(toSortPhoneBook.get(i + 1)) > 0) {
                        tempEntry = toSortPhoneBook.get(i);
                        toSortPhoneBook.set(i, toSortPhoneBook.get(i + 1));
                        toSortPhoneBook.set(i + 1, tempEntry);
                        changesOccuredInLastLoop = true;
                        numberOfChangesInIter++;
                    }
                }
                countIters++;
                if (exportDetails) {
                    String message = "Finished " + countIters + " iteration, with " + numberOfChangesInIter + " changes";
                    System.out.println(message);
                    sortDetailsWriter.write(message + System.lineSeparator());
                }
                if (System.currentTimeMillis() - startTime > maxduration) {
                    return Optional.empty();
                }
            } while (changesOccuredInLastLoop);

            if (exportDetails) {
                sortDetailsWriter.close();
            }

            return Optional.of(toSortPhoneBook);

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Unchecked
record: -1
